predicted_data <- predicted_data %>% select(c(x, y))
predicted_data <- predicted_data %>%
mutate(
predicted = predict.pct.nolag$response,
truth = predict.pct.nolag$truth,
residual = predicted - truth
)
predicted_data <- st_as_sf(predicted_data, coords = c("x", "y"), crs = 3400)
predicted_data <- st_join(twp_point, predicted_data)
predicted_data <- predicted_data %>% st_drop_geometry() %>% select(c(PID, residual))
predicted_data <- left_join(twp_polygon.pct.nolag, predicted_data, by = "PID")
temp_twp <- na.omit(predicted_data)
temp_twp <- unique(temp_twp$PID)
temp <- accu_disturb_total_pct %>% select(c(PID, year, disturb_total_pct)) %>% filter(year == 2021)
temp <- temp %>% mutate(disturb_total_pct = ifelse(PID %in% temp_twp, disturb_total_pct, NA))
predicted_data <- predicted_data %>% left_join(temp, by = "PID")
resd_pct <- ggplot(predicted_data) +
geom_sf(aes(fill = residual)) +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0
) +
labs(
title = "Residual by Township",
fill = "Residual"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
pct_disturb <- ggplot(predicted_data) +
geom_sf(aes(fill = disturb_total_pct)) +
scale_fill_gradient2(
low = "blue", mid = "white", high = "red",
midpoint = 0
) +
labs(
title = "% Disturbance by Township",
fill = "% Disturbance"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
feature.importance <- as.data.frame(trained.pct.nolag$importance())
feature.importance <- feature.importance %>% rownames_to_column(var = "feature")
colnames(feature.importance) <- c("feature", "importance")
feature.importance <- head(feature.importance, 20)
imp.feature <- feature.importance$feature
feature.importance.plot <- ggplot(feature.importance, aes(x = reorder(feature, importance), y = importance)) +
geom_col(fill = "steelblue") +
coord_flip() +
labs(
title = "Random Forest Feature Importance",
x = "Feature",
y = "Importance"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 18, face = "bold"),
legend.title = element_text(size = 14),
legend.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.text = element_text(size = 12)
)
### reloading task setup ###
accu_disturb_total_pct_nolag <- accu_disturb_total_pct %>% select(-c(lag1.disturb_total_pct))
total.pct.task.nolag <- as_task_regr_st(
id = "disturb_pct_nolag",
accu_disturb_total_pct_nolag, target = "disturb_total_pct",
coordinate_names = c("x", "y"), coords_as_features = TRUE, crs = 3400
)
train_idx_final <- which(total.pct.task.nolag$data()$year != 2021 & total.pct.task.nolag$data()$PID %in% train_PID)
ggsave("D:/Dropbox/Research/Peatland/report/14. 20250808/pred_true_plot.png", plot = pred_true_plot, width = 10, height = 8, dpi = 300)
ggsave("D:/Dropbox/Research/Peatland/report/14. 20250808/res_true_plot.png", plot = res_true_plot, width = 10, height = 8, dpi = 300)
#| echo: false
#| message: false
#| warning: false
#| fig-width: 16
#| fig-height: 8
#| fig-align: center
#| fig-fullwidth: true
#| fig-cap: "After Log Transform: Model Fit and Residuals"
#| fig-subcap: ["", ""]
#| label: fig-fit-log
#| fig-pos: 'H'
#| out-width: "100%"
#| fig-show: hold
#| layout-ncol: 2
knitr::include_graphics("D:/Dropbox/Research/Peatland/report/14. 20250808/graph/pred_true_plot.png")
#| echo: false
#| message: false
#| warning: false
#| fig-width: 16
#| fig-height: 8
#| fig-align: center
#| fig-fullwidth: true
#| fig-cap: "After Log Transform: Model Fit and Residuals"
#| fig-subcap: ["", ""]
#| label: fig-fit-log
#| fig-pos: 'H'
#| out-width: "100%"
#| fig-show: hold
#| layout-ncol: 2
knitr::include_graphics("D:/Dropbox/Research/Peatland/report/14. 20250808/graph/pred_true_plot.png")
#| echo: false
#| message: false
#| warning: false
#| fig-width: 16
#| fig-height: 8
#| fig-align: center
#| fig-fullwidth: true
#| fig-cap: "After Log Transform: Model Fit and Residuals"
#| fig-subcap: ["", ""]
#| label: fig-fit-log
#| fig-pos: 'H'
#| out-width: "100%"
#| fig-show: hold
#| layout-ncol: 2
knitr::include_graphics("D:/Dropbox/Research/Peatland/report/14. 20250808/pred_true_plot.png")
knitr::include_graphics("D:/Dropbox/Research/Peatland/report/14. 20250808/res_true_plot.png")
#| echo: false
#| message: false
#| warning: false
#| fig-width: 16
#| fig-height: 8
#| fig-align: center
#| fig-fullwidth: true
#| fig-cap: "After Log Transform: Model Fit and Residuals"
#| fig-subcap: ["", ""]
#| label: fig-fit-log
#| fig-pos: 'H'
#| out-width: "100%"
#| fig-show: hold
#| layout-ncol: 2
knitr::include_graphics("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/no_lag/log/tune_rmse/graph/pred_true_plot.png")
knitr::include_graphics("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/no_lag/log/tune_rmse/graph/res_true_plot.png")
library(dplyr)
library(mlr3)
library(mlr3learners)
library(mlr3tuning)
library(mlr3spatiotempcv) # for spatiotemporal CV
library(mlr3viz) # for visualization
library(blockCV) # for the helper function cv_spatial_autocor()
library(sf)
library(sp)
library(ggplot2)
# library(GSIF)
library(Boruta) # for feature selection
library(tibble)
library(spdep)
library(mapview)
library(webshot)
options(scipen=999)
twp <- st_read("D:/Dropbox/Research/Peatland/data/1. raw/Boundary/TWP/Alberta_TWP_3400.shp")
twp$PID <- as.numeric(twp$PID)
crs <- st_crs(twp)
centroids <- st_centroid(twp)
##### preprocessing of variables #####
### NA values ###
load("D:/Dropbox/Research/Peatland/data/3. merged/merge_twp_tall.Rda")
# peatland NAs #
twp_disturb$peatland_area_twp <- ifelse(is.na(twp_disturb$peatland_area_twp), 0, twp_disturb$peatland_area_twp)
twp_disturb$peatland_pct <- ifelse(is.na(twp_disturb$peatland_pct), 0, twp_disturb$peatland_pct)
# disturbance NAs #
twp_disturb$accu_disturb_total_ag_area <- ifelse(is.na(twp_disturb$accu_disturb_total_ag_area), 0, twp_disturb$accu_disturb_total_ag_area)
twp_disturb$accu_disturb_crop_area <- ifelse(is.na(twp_disturb$accu_disturb_crop_area), 0, twp_disturb$accu_disturb_crop_area)
twp_disturb$accu_disturb_pasture_area <- ifelse(is.na(twp_disturb$accu_disturb_pasture_area), 0, twp_disturb$accu_disturb_pasture_area)
twp_disturb$lag1.accu_disturb_total_ag_area <- ifelse(is.na(twp_disturb$lag1.accu_disturb_total_ag_area), 0, twp_disturb$lag1.accu_disturb_total_ag_area)
twp_disturb$lag1.accu_disturb_crop_area <- ifelse(is.na(twp_disturb$lag1.accu_disturb_crop_area), 0, twp_disturb$lag1.accu_disturb_crop_area)
twp_disturb$lag1.accu_disturb_pasture_area <- ifelse(is.na(twp_disturb$lag1.accu_disturb_pasture_area), 0, twp_disturb$lag1.accu_disturb_pasture_area)
twp_disturb$disturb_total_pct <- ifelse(is.na(twp_disturb$disturb_total_pct), 0, twp_disturb$disturb_total_pct)
twp_disturb$disturb_crop_pct <- ifelse(is.na(twp_disturb$disturb_crop_pct), 0, twp_disturb$disturb_crop_pct)
twp_disturb$disturb_pasture_pct <- ifelse(is.na(twp_disturb$disturb_pasture_pct), 0, twp_disturb$disturb_pasture_pct)
twp_disturb$lag1.disturb_total_pct <- ifelse(is.na(twp_disturb$lag1.disturb_total_pct), 0, twp_disturb$lag1.disturb_total_pct)
twp_disturb$lag1.disturb_crop_pct <- ifelse(is.na(twp_disturb$lag1.disturb_crop_pct), 0, twp_disturb$lag1.disturb_crop_pct)
twp_disturb$lag1.disturb_pasture_pct <- ifelse(is.na(twp_disturb$lag1.disturb_pasture_pct), 0, twp_disturb$lag1.disturb_pasture_pct)
twp_disturb$add.accu_disturb_total_ag_area <- ifelse(is.na(twp_disturb$add.accu_disturb_total_ag_area), 0, twp_disturb$add.accu_disturb_total_ag_area)
twp_disturb$add.accu_disturb_crop_area <- ifelse(is.na(twp_disturb$add.accu_disturb_crop_area), 0, twp_disturb$add.accu_disturb_crop_area)
twp_disturb$add.accu_disturb_pasture_area <- ifelse(is.na(twp_disturb$add.accu_disturb_pasture_area), 0, twp_disturb$add.accu_disturb_pasture_area)
twp_disturb$lag1.add.accu_disturb_total_ag_area <- ifelse(is.na(twp_disturb$lag1.add.accu_disturb_total_ag_area), 0, twp_disturb$lag1.add.accu_disturb_total_ag_area)
twp_disturb$lag1.add.accu_disturb_crop_area <- ifelse(is.na(twp_disturb$lag1.add.accu_disturb_crop_area), 0, twp_disturb$lag1.add.accu_disturb_crop_area)
twp_disturb$lag1.add.accu_disturb_pasture_area <- ifelse(is.na(twp_disturb$lag1.add.accu_disturb_pasture_area), 0, twp_disturb$lag1.add.accu_disturb_pasture_area)
twp_disturb$add.disturb_total_pct <- ifelse(is.na(twp_disturb$add.disturb_total_pct), 0, twp_disturb$add.disturb_total_pct)
twp_disturb$add.disturb_crop_pct <- ifelse(is.na(twp_disturb$add.disturb_crop_pct), 0, twp_disturb$add.disturb_crop_pct)
twp_disturb$add.disturb_pasture_pct <- ifelse(is.na(twp_disturb$add.disturb_pasture_pct), 0, twp_disturb$add.disturb_pasture_pct)
twp_disturb$lag1.add.disturb_total_pct <- ifelse(is.na(twp_disturb$lag1.add.disturb_total_pct), 0, twp_disturb$lag1.add.disturb_total_pct)
twp_disturb$lag1.add.disturb_crop_pct <- ifelse(is.na(twp_disturb$lag1.add.disturb_crop_pct), 0, twp_disturb$lag1.add.disturb_crop_pct)
twp_disturb$lag1.add.disturb_pasture_pct <- ifelse(is.na(twp_disturb$lag1.add.disturb_pasture_pct), 0, twp_disturb$lag1.add.disturb_pasture_pct)
# agriculture NAs #
twp_disturb$accu_total_ag_area <- ifelse(is.na(twp_disturb$accu_total_ag_area), 0, twp_disturb$accu_total_ag_area)
twp_disturb$accu_crop_area <- ifelse(is.na(twp_disturb$accu_crop_area), 0, twp_disturb$accu_crop_area)
twp_disturb$accu_pasture_area <- ifelse(is.na(twp_disturb$accu_pasture_area), 0, twp_disturb$accu_pasture_area)
twp_disturb$lag1.accu_total_ag_area <- ifelse(is.na(twp_disturb$lag1.accu_total_ag_area), 0, twp_disturb$lag1.accu_total_ag_area)
twp_disturb$lag1.accu_crop_area <- ifelse(is.na(twp_disturb$lag1.accu_crop_area), 0, twp_disturb$lag1.accu_crop_area)
twp_disturb$lag1.accu_pasture_area <- ifelse(is.na(twp_disturb$lag1.accu_pasture_area), 0, twp_disturb$lag1.accu_pasture_area)
twp_disturb$total_ag_pct <- ifelse(is.na(twp_disturb$total_ag_pct), 0, twp_disturb$total_ag_pct)
twp_disturb$crop_pct <- ifelse(is.na(twp_disturb$crop_pct), 0, twp_disturb$crop_pct)
twp_disturb$pasture_pct <- ifelse(is.na(twp_disturb$pasture_pct), 0, twp_disturb$pasture_pct)
twp_disturb$lag1.total_ag_pct <- ifelse(is.na(twp_disturb$lag1.total_ag_pct), 0, twp_disturb$lag1.total_ag_pct)
twp_disturb$lag1.crop_pct <- ifelse(is.na(twp_disturb$lag1.crop_pct), 0, twp_disturb$lag1.crop_pct)
twp_disturb$lag1.pasture_pct <- ifelse(is.na(twp_disturb$lag1.pasture_pct), 0, twp_disturb$lag1.pasture_pct)
twp_disturb$add.accu_total_ag_area <- ifelse(is.na(twp_disturb$add.accu_total_ag_area), 0, twp_disturb$add.accu_total_ag_area)
twp_disturb$add.accu_crop_area <- ifelse(is.na(twp_disturb$add.accu_crop_area), 0, twp_disturb$add.accu_crop_area)
twp_disturb$add.accu_pasture_area <- ifelse(is.na(twp_disturb$add.accu_pasture_area), 0, twp_disturb$add.accu_pasture_area)
twp_disturb$lag1.add.accu_total_ag_area <- ifelse(is.na(twp_disturb$lag1.add.accu_total_ag_area), 0, twp_disturb$lag1.add.accu_total_ag_area)
twp_disturb$lag1.add.accu_crop_area <- ifelse(is.na(twp_disturb$lag1.add.accu_crop_area), 0, twp_disturb$lag1.add.accu_crop_area)
twp_disturb$lag1.add.accu_pasture_area <- ifelse(is.na(twp_disturb$lag1.add.accu_pasture_area), 0, twp_disturb$lag1.add.accu_pasture_area)
twp_disturb$add.total_ag_pct <- ifelse(is.na(twp_disturb$add.total_ag_pct), 0, twp_disturb$add.total_ag_pct)
twp_disturb$add.crop_pct <- ifelse(is.na(twp_disturb$add.crop_pct), 0, twp_disturb$add.crop_pct)
twp_disturb$add.pasture_pct <- ifelse(is.na(twp_disturb$add.pasture_pct), 0, twp_disturb$add.pasture_pct)
twp_disturb$lag1.add.total_ag_pct <- ifelse(is.na(twp_disturb$lag1.add.total_ag_pct), 0, twp_disturb$lag1.add.total_ag_pct)
twp_disturb$lag1.add.crop_pct <- ifelse(is.na(twp_disturb$lag1.add.crop_pct), 0, twp_disturb$lag1.add.crop_pct)
twp_disturb$lag1.add.pasture_pct <- ifelse(is.na(twp_disturb$lag1.add.pasture_pct), 0, twp_disturb$lag1.add.pasture_pct)
# road length #
twp_disturb$accu_road_length <- ifelse(is.na(twp_disturb$accu_road_length), 0, twp_disturb$accu_road_length)
#
# # lsrs rating # not safe to replace due to NR in LSRS - cleared no longer a problem
#
# twp_disturb$lsrs2_area <- ifelse(is.na(twp_disturb$lsrs2_area), 0, twp_disturb$lsrs2_area)
# twp_disturb$lsrs3_area <- ifelse(is.na(twp_disturb$lsrs3_area), 0, twp_disturb$lsrs3_area)
# twp_disturb$lsrs2_pct <- ifelse(is.na(twp_disturb$lsrs2_pct), 0, twp_disturb$lsrs2_pct)
# twp_disturb$lsrs3_pct <- ifelse(is.na(twp_disturb$lsrs3_pct), 0, twp_disturb$lsrs3_pct)
# financial variables #
# upon checking townships with no financial record in the census of agriculture, as well as the sum of agricultural land that equals 0
# 0 are replaced for the repsective variables
# twp_disturb %>% st_drop_geometry() %>% filter(is.na(profit)) %>% summarise(ag_area = sum(accu_total_ag_area, na.rm = T))
# twp_disturb %>% st_drop_geometry() %>% filter(is.na(capital)) %>% summarise(ag_area = sum(accu_total_ag_area, na.rm = T))
twp_disturb$rev <- ifelse(is.na(twp_disturb$rev) & twp_disturb$accu_total_ag_area == 0, 0, twp_disturb$rev)
twp_disturb$exp <- ifelse(is.na(twp_disturb$exp) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$exp)
twp_disturb$profit <- ifelse(is.na(twp_disturb$profit) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$profit)
twp_disturb$capital <- ifelse(is.na(twp_disturb$capital) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$capital)
twp_disturb$building <- ifelse(is.na(twp_disturb$building) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$building)
twp_disturb$machine <- ifelse(is.na(twp_disturb$machine) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$machine)
twp_disturb$livestock <- ifelse(is.na(twp_disturb$livestock) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$livestock)
twp_disturb$rev_real <- ifelse(is.na(twp_disturb$rev_real) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$rev_real)
twp_disturb$exp_real <- ifelse(is.na(twp_disturb$exp_real) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$exp_real)
twp_disturb$profit_real <- ifelse(is.na(twp_disturb$profit_real) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$profit_real)
twp_disturb$capital_real <- ifelse(is.na(twp_disturb$capital_real) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$capital_real)
twp_disturb$building_real <- ifelse(is.na(twp_disturb$building_real) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$building_real)
twp_disturb$machine_real <- ifelse(is.na(twp_disturb$machine_real) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$machine_real)
twp_disturb$livestock_real <- ifelse(is.na(twp_disturb$livestock_real) & twp_disturb$accu_total_ag_area == 0, 0,twp_disturb$livestock_real)
##### generating spatial lags using Queen adjacency matrices #####
# dropping vars with large proportion of NAs first to preserve townships
twp_disturb <- twp_disturb %>% select(-c(lsrs2_area, lsrs2_pct, lsrs3_area, lsrs3_pct))
twp_disturb <- twp_disturb %>% select(-ends_with("_hB"))
#
# test <- twp_disturb %>% group_by(year) %>%
#   summarise(across(everything(), ~sum(is.na(.))))
x_to_lag <- colnames(twp_disturb)
x_to_lag <- setdiff(x_to_lag,
c("PID", "year", "geometry", "longitude", "latitude", "twp_area", "peatland_area_twp", "peatland_pct",
# current-year target variable of adjacent townships should be available #
"accu_disturb_total_ag_area", "accu_disturb_crop_area", "accu_disturb_pasture_area",
"accu_total_ag_area", "accu_pasture_area", "accu_crop_area",
"total_ag_pct", "pasture_pct", "crop_pct",
"disturb_total_pct", "disturb_crop_pct", "disturb_pasture_pct",
"add.accu_total_ag_area", "add.accu_pasture_area", "add.accu_crop_area",
"add.accu_disturb_total_ag_area", "add.accu_disturb_pasture_area", "add.accu_disturb_crop_area",
"add.total_ag_pct", "add.pasture_pct", "add.crop_pct",
"add.disturb_total_pct", "add.disturb_pasture_pct", "add.disturb_crop_pct",
"soil_text" # non-numeric class var #
))
# test <- twp_disturb[, x_to_lag] %>% group_by(year) %>%
#     summarise(across(everything(), ~sum(is.na(.))))
# 2837 townships has NAs per year in climate vars
# NAs in hA soil are 17 townships per year (cmp vars), OR 57 townships per year (soil layer vars)
### Ye
twp_disturb_2006 <- twp_disturb %>% filter(year == 2006) %>% mutate(PID = as.character(PID)) #7524
twp_disturb_2006 <- na.omit(twp_disturb_2006)
twp_adj <- twp_disturb_2006 %>% select(c(PID))
twp_adj <- poly2nb(twp_adj, row.names = twp_adj$PID, queen = TRUE) # townships with no neighboring townships will be generated
twp_adj_count <- card(twp_adj)
twp_adj_PID <- attr(twp_adj, "region.id")
unique(twp_adj_PID == twp_disturb_2006$PID) # should return TRUE
twp_w <- nb2listw(twp_adj, style = "W", zero.policy = TRUE)
# ---- compute spatial lags (row-standardized W) ----
for (x in x_to_lag) {
v <- twp_disturb_2006[[x]]
twp_disturb_2006[[paste0("adj_", x)]] <- lag.listw(twp_w, v, zero.policy = FALSE, na.action = na.exclude )
}
rows_with_na <- twp_disturb_2006[apply(
twp_disturb_2006,
1,
function(x) any(is.na(x))
), ]
twp_disturb_2006
rows_with_na
twp_disturb_2006 <- twp_disturb %>% filter(year == 2006) %>% mutate(PID = as.character(PID)) #7524
twp_disturb_2006 <- na.omit(twp_disturb_2006)
twp_adj <- twp_disturb_2006 %>% select(c(PID))
twp_adj <- poly2nb(twp_adj, row.names = twp_adj$PID, queen = TRUE) # townships with no neighboring townships will be generated
twp_adj_count <- card(twp_adj)
twp_adj_PID <- attr(twp_adj, "region.id")
unique(twp_adj_PID == twp_disturb_2006$PID) # should return TRUE
twp_w <- nb2listw(twp_adj, style = "W", zero.policy = TRUE)
# ---- compute spatial lags (row-standardized W) ----
for (x in x_to_lag) {
v <- twp_disturb_2006[[x]]
twp_disturb_2006[[paste0("adj_", x)]] <- lag.listw(twp_w, v, zero.policy = FALSE)
}
twp_disturb_2006 <- twp_disturb %>% filter(year == 2006) %>% mutate(PID = as.character(PID)) #7524
# twp_disturb_2006 <- na.omit(twp_disturb_2006)
twp_adj <- twp_disturb_2006 %>% select(c(PID))
twp_adj <- poly2nb(twp_adj, row.names = twp_adj$PID, queen = TRUE) # townships with no neighboring townships will be generated
twp_adj_count <- card(twp_adj)
twp_adj_PID <- attr(twp_adj, "region.id")
unique(twp_adj_PID == twp_disturb_2006$PID) # should return TRUE
twp_w <- nb2listw(twp_adj, style = "W", zero.policy = TRUE)
# ---- compute spatial lags (row-standardized W) ----
for (x in x_to_lag) {
v <- twp_disturb_2006[[x]]
twp_disturb_2006[[paste0("adj_", x)]] <- lag.listw(twp_w, v, zero.policy = FALSE)
}
# ---- compute spatial lags (row-standardized W) ----
for (x in x_to_lag) {
v <- twp_disturb_2006[[x]]
twp_disturb_2006[[paste0("adj_", x)]] <- lag.listw(twp_w, v, zero.policy = FALSE, na.action = na.exclude)
}
# ---- compute spatial lags (row-standardized W) ----
for (x in x_to_lag) {
v <- twp_disturb_2006[[x]]
twp_disturb_2006[[paste0("adj_", x)]] <- lag.listw(twp_w, v, zero.policy = FALSE, na.action = na.omit)
}
4640-4536
104/4
#| echo: false
#| message: false
#| warning: false
#| fig-width: 16
#| fig-height: 8
#| fig-align: center
#| fig-fullwidth: true
#| fig-cap: "Logged %Disturbance (without lag): Feature Importance"
#| label: fig-fit-log
#| fig-pos: 'H'
knitr::include_graphics("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/no_lag/log/tune_rmse/graph/feature_importance_plot.png")
fit <- load("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/no_lag/log/tune_rmse/graph/tuneRMSE_fit.RData")
fit
load("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/no_lag/log/tune_rmse/graph/tuneRMSE_fit.RData")
tuneRMSE.fit
colnames(tuneRMSE.fit) <- c("Models", "R-squared", "MAE", "RMSE", "RMSE/sd(Y)", "RMSE/mean(Y)", "RMSE/range(Y)")
colnames(tuneRMSE.fit) <- c("R-squared", "MAE", "RMSE", "RMSE/sd(Y)", "RMSE/mean(Y)", "RMSE/range(Y)")
tuneRMSE.fit
load("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/lag/log/tune_rmse/tuneRMSE_fit.RData")
load("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/lag/log/graph//tuneRMSE_fit.RData")
load("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/lag/log/graph/tuneRMSE_fit.RData")
task.pct.log <- readRDS("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/lag/log/task_pct_log.rds")
task.pct.log.nolag <- tuneRMSE.fit
task.pct.log <- readRDS("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/lag/log/task_pct_log.rds")
task.pct.log.df <- task.pct.log$data()
temp_y_true <- task.pct.log$truth()
task.pct.log.predict <- readRDS("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/lag/log/predict_pct_log.rds")
task.pct.log.rmse <- as.data.frame(task.pct.log.predict$score(msr("regr.rmse")))
colnames(task.pct.log.rmse) <- "regr.rmse"
task.pct.log.rmse
task.pct.log.rmse$n.rmse.sd <- task.pct.log.rmse$regr.rmse / sd(temp_y_true, na.rm = T)
task.pct.log.rmse$n.rmse.mean <- task.pct.log.rmse$regr.rmse / mean(temp_y_true, na.rm = T)
task.pct.log.rmse$n.rmse.range <- task.pct.log.rmse$regr.rmse / (max(temp_y_true, na.rm = T) - min(temp_y_true, na.rm = T))
task.pct.log.rsq <- as.data.frame(task.pct.log$score(msr("regr.rsq")))
task.pct.log.rsq <- as.data.frame(task.pct.log.predict$score(msr("regr.rsq")))
colnames(task.pct.log.rsq) <- "regr.rsq"
task.pct.log.mae <- as.data.frame(task.pct.log.predict$score(msr("regr.mae")))
colnames(task.pct.log.mae) <- "regr.mae"
task.pct.log.fit <- cbind(task.pct.log.rsq, task.pct.log.mae, task.pct.log.rmse)
task.pct.log.fit
load("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/no_lag/log/tune_rmse/graph/tuneRMSE_fit.RData")
task.pct.log.nolag.fit <- tuneRMSE.fit
task.pct.log.nolag.fit
colnames.fit <- c("Models", "R-squared", "MAE", "RMSE", "RMSE/sd(Y)", "RMSE/mean(Y)", "RMSE/range(Y)")
model <- c("%Disturbance (log)", "%Disturbance (log, no lag)")
task.pct.log.nolag.fit <- rbind(task.pct.log.fit, task.pct.log.nolag.fit)
pct_log_fit <- round(pct_log_fit, 3)
pct_log_fit <- rbind(task.pct.log.fit, task.pct.log.nolag.fit)
pct_log_fit <- round(pct_log_fit, 3)
pct_log_fit
load("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/no_lag/log/tune_rmse/graph/tuneRMSE_fit.RData")
task.pct.log.nolag.fit <- tuneRMSE.fit
task.pct.log <- readRDS("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/lag/log/task_pct_log.rds")
task.pct.log.predict <- readRDS("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/lag/log/predict_pct_log.rds")
task.pct.log.df <- task.pct.log$data()
temp_y_true <- task.pct.log$truth()
task.pct.log.rmse <- as.data.frame(task.pct.log.predict$score(msr("regr.rmse")))
colnames(task.pct.log.rmse) <- "regr.rmse"
task.pct.log.rmse$n.rmse.sd <- task.pct.log.rmse$regr.rmse / sd(temp_y_true, na.rm = T)
task.pct.log.rmse$n.rmse.mean <- task.pct.log.rmse$regr.rmse / mean(temp_y_true, na.rm = T)
task.pct.log.rmse$n.rmse.range <- task.pct.log.rmse$regr.rmse / (max(temp_y_true, na.rm = T) - min(temp_y_true, na.rm = T))
task.pct.log.rsq <- as.data.frame(task.pct.log.predict$score(msr("regr.rsq")))
colnames(task.pct.log.rsq) <- "regr.rsq"
task.pct.log.mae <- as.data.frame(task.pct.log.predict$score(msr("regr.mae")))
colnames(task.pct.log.mae) <- "regr.mae"
task.pct.log.fit <- cbind(task.pct.log.rsq, task.pct.log.mae, task.pct.log.rmse)
colnames.fit <- c("Models", "R-squared", "MAE", "RMSE", "RMSE/sd(Y)", "RMSE/mean(Y)", "RMSE/range(Y)")
model <- c("%Disturbance (log)", "%Disturbance (log, no lag)")
pct_log_fit <- rbind(task.pct.log.fit, task.pct.log.nolag.fit)
pct_log_fit <- round(pct_log_fit, 3)
pct_log_fit
pct_log_fit <- cbind(model, pct_log_fit)
rownames(pct_log_fit) <- NULL
colnames(pct_log_fit) <- colnames.fit
pct_log_fit
#| echo: false
#| message: false
#| warning: false
#| label: tbl-fitness
#| tbl-cap: "Summary of the Fitness"
knitr::kable(
pct_log_fit,
booktabs = TRUE,
align = "c"
) %>%
column_spec(1, width = "3.2cm") %>%
column_spec(2, width = "1.7cm") %>%
column_spec(3:4, width = "1.9cm") %>%
column_spec(5, width = "1.9cm") %>%
column_spec(6:ncol(overall_fit), width = "2.3cm")
#| echo: false
#| message: false
#| warning: false
#| label: tbl-fitness
#| tbl-cap: "Summary of the Fitness"
knitr::kable(
pct_log_fit,
booktabs = TRUE,
align = "c"
) %>%
column_spec(1, width = "3.5cm") %>%
column_spec(2, width = "2cm") %>%
column_spec(3:4, width = "1.9cm") %>%
column_spec(5, width = "1.9cm") %>%
column_spec(6:ncol(overall_fit), width = "2.3cm")
#| echo: false
#| message: false
#| warning: false
#| label: tbl-fitness
#| tbl-cap: "Summary of the Fitness"
knitr::kable(
pct_log_fit,
booktabs = TRUE,
align = "c"
) %>%
column_spec(1, width = "4cm") %>%
column_spec(2, width = "2cm") %>%
column_spec(3:4, width = "1.9cm") %>%
column_spec(5, width = "1.9cm") %>%
column_spec(6:ncol(pct_log_fit), width = "2.3cm")
#| echo: false
#| message: false
#| warning: false
#| label: tbl-fitness
#| tbl-cap: "Summary of the Fitness"
knitr::kable(
pct_log_fit,
booktabs = TRUE,
align = "c"
) %>%
column_spec(1, width = "4.2cm") %>%
column_spec(2, width = "1.8cm") %>%
column_spec(3:4, width = "1.8cm") %>%
column_spec(5, width = "1.8cm") %>%
column_spec(6:ncol(pct_log_fit), width = "2.3cm")
#| echo: false
#| message: false
#| warning: false
#| label: tbl-fitness
#| tbl-cap: "Summary of the Fitness"
knitr::kable(
pct_log_fit,
booktabs = TRUE,
align = "c"
) %>%
column_spec(1, width = "3.8cm") %>%
column_spec(2, width = "1.8cm") %>%
column_spec(3:4, width = "1.8cm") %>%
column_spec(5, width = "1.8cm") %>%
column_spec(6:ncol(pct_log_fit), width = "2.3cm")
pct_log_fit
4640 - 4534
106/4
4640 - 4536
104/4
#| echo: false
#| message: false
#| warning: false
#| fig-align: center
#| fig-cap: "Logged %Disturbance (without lag): Residual vs. Predicted Disturbance"
#| label: fig-res-pred
#| fig-pos: 'H'
#| out-width: "85%"
knitr::include_graphics("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/no_lag/log/tune_rmse/graph/res_pred_plot.png")
#| echo: false
#| message: false
#| warning: false
#| fig-align: center
#| fig-cap: "Logged %Disturbance (without lag): Residual vs. Predicted Disturbance"
#| label: fig-res-pred
#| fig-pos: 'H'
#| out-width: "85%"
knitr::include_graphics("D:/Dropbox/Research/Peatland/data/4. machine_learning/code/2. training/results/pct (adj)/no_lag/log/tune_rsq/graph/res_pred_plot.png")
head(mpg)
install.packages("tidyverse")
?df
?dataframe
?as.data.frame
